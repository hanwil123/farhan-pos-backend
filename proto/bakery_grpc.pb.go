// File: bakery_pos.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/bakery.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BakeryPOSService_CreateCategory_FullMethodName  = "/proto.BakeryPOSService/CreateCategory"
	BakeryPOSService_ListCategories_FullMethodName  = "/proto.BakeryPOSService/ListCategories"
	BakeryPOSService_GetCategoryById_FullMethodName = "/proto.BakeryPOSService/GetCategoryById"
	BakeryPOSService_CreateProduct_FullMethodName   = "/proto.BakeryPOSService/CreateProduct"
	BakeryPOSService_GetProduct_FullMethodName      = "/proto.BakeryPOSService/GetProduct"
	BakeryPOSService_ListProducts_FullMethodName    = "/proto.BakeryPOSService/ListProducts"
	BakeryPOSService_CreatePurchase_FullMethodName  = "/proto.BakeryPOSService/CreatePurchase"
	BakeryPOSService_AddToCart_FullMethodName       = "/proto.BakeryPOSService/AddToCart"
	BakeryPOSService_GetCart_FullMethodName         = "/proto.BakeryPOSService/GetCart"
)

// BakeryPOSServiceClient is the client API for BakeryPOSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BakeryPOSServiceClient interface {
	CreateCategory(ctx context.Context, in *CategoryRequest, opts ...grpc.CallOption) (*CategoryResponse, error)
	ListCategories(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CategoryList, error)
	GetCategoryById(ctx context.Context, in *GetCategoryByIdRequest, opts ...grpc.CallOption) (*CategoryResponse, error)
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	ListProducts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ProductList, error)
	CreatePurchase(ctx context.Context, in *CreatePurchaseRequest, opts ...grpc.CallOption) (*PurchaseResponse, error)
	AddToCart(ctx context.Context, in *Cart, opts ...grpc.CallOption) (*CartResponse, error)
	GetCart(ctx context.Context, in *Cart, opts ...grpc.CallOption) (*CartResponse, error)
}

type bakeryPOSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBakeryPOSServiceClient(cc grpc.ClientConnInterface) BakeryPOSServiceClient {
	return &bakeryPOSServiceClient{cc}
}

func (c *bakeryPOSServiceClient) CreateCategory(ctx context.Context, in *CategoryRequest, opts ...grpc.CallOption) (*CategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryResponse)
	err := c.cc.Invoke(ctx, BakeryPOSService_CreateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bakeryPOSServiceClient) ListCategories(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CategoryList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryList)
	err := c.cc.Invoke(ctx, BakeryPOSService_ListCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bakeryPOSServiceClient) GetCategoryById(ctx context.Context, in *GetCategoryByIdRequest, opts ...grpc.CallOption) (*CategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryResponse)
	err := c.cc.Invoke(ctx, BakeryPOSService_GetCategoryById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bakeryPOSServiceClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, BakeryPOSService_CreateProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bakeryPOSServiceClient) GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, BakeryPOSService_GetProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bakeryPOSServiceClient) ListProducts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ProductList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductList)
	err := c.cc.Invoke(ctx, BakeryPOSService_ListProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bakeryPOSServiceClient) CreatePurchase(ctx context.Context, in *CreatePurchaseRequest, opts ...grpc.CallOption) (*PurchaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseResponse)
	err := c.cc.Invoke(ctx, BakeryPOSService_CreatePurchase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bakeryPOSServiceClient) AddToCart(ctx context.Context, in *Cart, opts ...grpc.CallOption) (*CartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, BakeryPOSService_AddToCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bakeryPOSServiceClient) GetCart(ctx context.Context, in *Cart, opts ...grpc.CallOption) (*CartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, BakeryPOSService_GetCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BakeryPOSServiceServer is the server API for BakeryPOSService service.
// All implementations must embed UnimplementedBakeryPOSServiceServer
// for forward compatibility.
type BakeryPOSServiceServer interface {
	CreateCategory(context.Context, *CategoryRequest) (*CategoryResponse, error)
	ListCategories(context.Context, *Empty) (*CategoryList, error)
	GetCategoryById(context.Context, *GetCategoryByIdRequest) (*CategoryResponse, error)
	CreateProduct(context.Context, *CreateProductRequest) (*ProductResponse, error)
	GetProduct(context.Context, *GetProductRequest) (*ProductResponse, error)
	ListProducts(context.Context, *Empty) (*ProductList, error)
	CreatePurchase(context.Context, *CreatePurchaseRequest) (*PurchaseResponse, error)
	AddToCart(context.Context, *Cart) (*CartResponse, error)
	GetCart(context.Context, *Cart) (*CartResponse, error)
	mustEmbedUnimplementedBakeryPOSServiceServer()
}

// UnimplementedBakeryPOSServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBakeryPOSServiceServer struct{}

func (UnimplementedBakeryPOSServiceServer) CreateCategory(context.Context, *CategoryRequest) (*CategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedBakeryPOSServiceServer) ListCategories(context.Context, *Empty) (*CategoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategories not implemented")
}
func (UnimplementedBakeryPOSServiceServer) GetCategoryById(context.Context, *GetCategoryByIdRequest) (*CategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryById not implemented")
}
func (UnimplementedBakeryPOSServiceServer) CreateProduct(context.Context, *CreateProductRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedBakeryPOSServiceServer) GetProduct(context.Context, *GetProductRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedBakeryPOSServiceServer) ListProducts(context.Context, *Empty) (*ProductList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProducts not implemented")
}
func (UnimplementedBakeryPOSServiceServer) CreatePurchase(context.Context, *CreatePurchaseRequest) (*PurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePurchase not implemented")
}
func (UnimplementedBakeryPOSServiceServer) AddToCart(context.Context, *Cart) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToCart not implemented")
}
func (UnimplementedBakeryPOSServiceServer) GetCart(context.Context, *Cart) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCart not implemented")
}
func (UnimplementedBakeryPOSServiceServer) mustEmbedUnimplementedBakeryPOSServiceServer() {}
func (UnimplementedBakeryPOSServiceServer) testEmbeddedByValue()                          {}

// UnsafeBakeryPOSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BakeryPOSServiceServer will
// result in compilation errors.
type UnsafeBakeryPOSServiceServer interface {
	mustEmbedUnimplementedBakeryPOSServiceServer()
}

func RegisterBakeryPOSServiceServer(s grpc.ServiceRegistrar, srv BakeryPOSServiceServer) {
	// If the following call pancis, it indicates UnimplementedBakeryPOSServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BakeryPOSService_ServiceDesc, srv)
}

func _BakeryPOSService_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BakeryPOSServiceServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BakeryPOSService_CreateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BakeryPOSServiceServer).CreateCategory(ctx, req.(*CategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BakeryPOSService_ListCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BakeryPOSServiceServer).ListCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BakeryPOSService_ListCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BakeryPOSServiceServer).ListCategories(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BakeryPOSService_GetCategoryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BakeryPOSServiceServer).GetCategoryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BakeryPOSService_GetCategoryById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BakeryPOSServiceServer).GetCategoryById(ctx, req.(*GetCategoryByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BakeryPOSService_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BakeryPOSServiceServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BakeryPOSService_CreateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BakeryPOSServiceServer).CreateProduct(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BakeryPOSService_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BakeryPOSServiceServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BakeryPOSService_GetProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BakeryPOSServiceServer).GetProduct(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BakeryPOSService_ListProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BakeryPOSServiceServer).ListProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BakeryPOSService_ListProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BakeryPOSServiceServer).ListProducts(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BakeryPOSService_CreatePurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BakeryPOSServiceServer).CreatePurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BakeryPOSService_CreatePurchase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BakeryPOSServiceServer).CreatePurchase(ctx, req.(*CreatePurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BakeryPOSService_AddToCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BakeryPOSServiceServer).AddToCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BakeryPOSService_AddToCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BakeryPOSServiceServer).AddToCart(ctx, req.(*Cart))
	}
	return interceptor(ctx, in, info, handler)
}

func _BakeryPOSService_GetCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BakeryPOSServiceServer).GetCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BakeryPOSService_GetCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BakeryPOSServiceServer).GetCart(ctx, req.(*Cart))
	}
	return interceptor(ctx, in, info, handler)
}

// BakeryPOSService_ServiceDesc is the grpc.ServiceDesc for BakeryPOSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BakeryPOSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BakeryPOSService",
	HandlerType: (*BakeryPOSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCategory",
			Handler:    _BakeryPOSService_CreateCategory_Handler,
		},
		{
			MethodName: "ListCategories",
			Handler:    _BakeryPOSService_ListCategories_Handler,
		},
		{
			MethodName: "GetCategoryById",
			Handler:    _BakeryPOSService_GetCategoryById_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _BakeryPOSService_CreateProduct_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _BakeryPOSService_GetProduct_Handler,
		},
		{
			MethodName: "ListProducts",
			Handler:    _BakeryPOSService_ListProducts_Handler,
		},
		{
			MethodName: "CreatePurchase",
			Handler:    _BakeryPOSService_CreatePurchase_Handler,
		},
		{
			MethodName: "AddToCart",
			Handler:    _BakeryPOSService_AddToCart_Handler,
		},
		{
			MethodName: "GetCart",
			Handler:    _BakeryPOSService_GetCart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bakery.proto",
}
