// File: bakery_pos.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/bakery.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BakeryPOSService_CreateCategory_FullMethodName  = "/proto.BakeryPOSService/CreateCategory"
	BakeryPOSService_ListCategories_FullMethodName  = "/proto.BakeryPOSService/ListCategories"
	BakeryPOSService_GetCategoryById_FullMethodName = "/proto.BakeryPOSService/GetCategoryById"
	BakeryPOSService_CreateProduct_FullMethodName   = "/proto.BakeryPOSService/CreateProduct"
	BakeryPOSService_UpdateProduct_FullMethodName   = "/proto.BakeryPOSService/UpdateProduct"
	BakeryPOSService_DeleteProduct_FullMethodName   = "/proto.BakeryPOSService/DeleteProduct"
	BakeryPOSService_GetProduct_FullMethodName      = "/proto.BakeryPOSService/GetProduct"
	BakeryPOSService_ListProducts_FullMethodName    = "/proto.BakeryPOSService/ListProducts"
	BakeryPOSService_AdjustStock_FullMethodName     = "/proto.BakeryPOSService/AdjustStock"
	BakeryPOSService_ReceiveStock_FullMethodName    = "/proto.BakeryPOSService/ReceiveStock"
	BakeryPOSService_StockOpname_FullMethodName     = "/proto.BakeryPOSService/StockOpname"
	BakeryPOSService_CreateSale_FullMethodName      = "/proto.BakeryPOSService/CreateSale"
	BakeryPOSService_PrintReceipt_FullMethodName    = "/proto.BakeryPOSService/PrintReceipt"
	BakeryPOSService_GetSalesHistory_FullMethodName = "/proto.BakeryPOSService/GetSalesHistory"
	BakeryPOSService_GenerateReport_FullMethodName  = "/proto.BakeryPOSService/GenerateReport"
	BakeryPOSService_ListUsers_FullMethodName       = "/proto.BakeryPOSService/ListUsers"
	BakeryPOSService_CreateUser_FullMethodName      = "/proto.BakeryPOSService/CreateUser"
	BakeryPOSService_UpdateUser_FullMethodName      = "/proto.BakeryPOSService/UpdateUser"
	BakeryPOSService_DeleteUser_FullMethodName      = "/proto.BakeryPOSService/DeleteUser"
)

// BakeryPOSServiceClient is the client API for BakeryPOSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ==========================================
// Service
// ==========================================
type BakeryPOSServiceClient interface {
	// Produk
	CreateCategory(ctx context.Context, in *CategoryRequest, opts ...grpc.CallOption) (*CategoryResponse, error)
	ListCategories(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CategoryList, error)
	GetCategoryById(ctx context.Context, in *GetCategoryByIdRequest, opts ...grpc.CallOption) (*CategoryResponse, error)
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*DeleteProductResponse, error)
	GetProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	ListProducts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ProductListResponse, error)
	// Manajemen Stok (sama dengan produk, tapi bisa ditambah fitur stok manual)
	AdjustStock(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	ReceiveStock(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	StockOpname(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ProductListResponse, error)
	// Transaksi Penjualan
	CreateSale(ctx context.Context, in *SaleRequest, opts ...grpc.CallOption) (*SaleResponse, error)
	PrintReceipt(ctx context.Context, in *SaleRequest, opts ...grpc.CallOption) (*SaleResponse, error)
	GetSalesHistory(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListSale, error)
	// Laporan
	GenerateReport(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error)
	// Manajemen User
	ListUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserList, error)
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	DeleteUser(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*Empty, error)
}

type bakeryPOSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBakeryPOSServiceClient(cc grpc.ClientConnInterface) BakeryPOSServiceClient {
	return &bakeryPOSServiceClient{cc}
}

func (c *bakeryPOSServiceClient) CreateCategory(ctx context.Context, in *CategoryRequest, opts ...grpc.CallOption) (*CategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryResponse)
	err := c.cc.Invoke(ctx, BakeryPOSService_CreateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bakeryPOSServiceClient) ListCategories(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CategoryList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryList)
	err := c.cc.Invoke(ctx, BakeryPOSService_ListCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bakeryPOSServiceClient) GetCategoryById(ctx context.Context, in *GetCategoryByIdRequest, opts ...grpc.CallOption) (*CategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryResponse)
	err := c.cc.Invoke(ctx, BakeryPOSService_GetCategoryById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bakeryPOSServiceClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, BakeryPOSService_CreateProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bakeryPOSServiceClient) UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, BakeryPOSService_UpdateProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bakeryPOSServiceClient) DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*DeleteProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProductResponse)
	err := c.cc.Invoke(ctx, BakeryPOSService_DeleteProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bakeryPOSServiceClient) GetProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, BakeryPOSService_GetProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bakeryPOSServiceClient) ListProducts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ProductListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductListResponse)
	err := c.cc.Invoke(ctx, BakeryPOSService_ListProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bakeryPOSServiceClient) AdjustStock(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, BakeryPOSService_AdjustStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bakeryPOSServiceClient) ReceiveStock(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, BakeryPOSService_ReceiveStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bakeryPOSServiceClient) StockOpname(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ProductListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductListResponse)
	err := c.cc.Invoke(ctx, BakeryPOSService_StockOpname_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bakeryPOSServiceClient) CreateSale(ctx context.Context, in *SaleRequest, opts ...grpc.CallOption) (*SaleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaleResponse)
	err := c.cc.Invoke(ctx, BakeryPOSService_CreateSale_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bakeryPOSServiceClient) PrintReceipt(ctx context.Context, in *SaleRequest, opts ...grpc.CallOption) (*SaleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaleResponse)
	err := c.cc.Invoke(ctx, BakeryPOSService_PrintReceipt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bakeryPOSServiceClient) GetSalesHistory(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListSale, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSale)
	err := c.cc.Invoke(ctx, BakeryPOSService_GetSalesHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bakeryPOSServiceClient) GenerateReport(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportResponse)
	err := c.cc.Invoke(ctx, BakeryPOSService_GenerateReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bakeryPOSServiceClient) ListUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserList)
	err := c.cc.Invoke(ctx, BakeryPOSService_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bakeryPOSServiceClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, BakeryPOSService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bakeryPOSServiceClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, BakeryPOSService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bakeryPOSServiceClient) DeleteUser(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, BakeryPOSService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BakeryPOSServiceServer is the server API for BakeryPOSService service.
// All implementations must embed UnimplementedBakeryPOSServiceServer
// for forward compatibility.
//
// ==========================================
// Service
// ==========================================
type BakeryPOSServiceServer interface {
	// Produk
	CreateCategory(context.Context, *CategoryRequest) (*CategoryResponse, error)
	ListCategories(context.Context, *Empty) (*CategoryList, error)
	GetCategoryById(context.Context, *GetCategoryByIdRequest) (*CategoryResponse, error)
	CreateProduct(context.Context, *CreateProductRequest) (*ProductResponse, error)
	UpdateProduct(context.Context, *UpdateProductRequest) (*ProductResponse, error)
	DeleteProduct(context.Context, *DeleteProductRequest) (*DeleteProductResponse, error)
	GetProduct(context.Context, *ProductRequest) (*ProductResponse, error)
	ListProducts(context.Context, *Empty) (*ProductListResponse, error)
	// Manajemen Stok (sama dengan produk, tapi bisa ditambah fitur stok manual)
	AdjustStock(context.Context, *ProductRequest) (*ProductResponse, error)
	ReceiveStock(context.Context, *ProductRequest) (*ProductResponse, error)
	StockOpname(context.Context, *Empty) (*ProductListResponse, error)
	// Transaksi Penjualan
	CreateSale(context.Context, *SaleRequest) (*SaleResponse, error)
	PrintReceipt(context.Context, *SaleRequest) (*SaleResponse, error)
	GetSalesHistory(context.Context, *Empty) (*ListSale, error)
	// Laporan
	GenerateReport(context.Context, *ReportRequest) (*ReportResponse, error)
	// Manajemen User
	ListUsers(context.Context, *Empty) (*UserList, error)
	CreateUser(context.Context, *User) (*User, error)
	UpdateUser(context.Context, *User) (*User, error)
	DeleteUser(context.Context, *ProductRequest) (*Empty, error)
	mustEmbedUnimplementedBakeryPOSServiceServer()
}

// UnimplementedBakeryPOSServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBakeryPOSServiceServer struct{}

func (UnimplementedBakeryPOSServiceServer) CreateCategory(context.Context, *CategoryRequest) (*CategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedBakeryPOSServiceServer) ListCategories(context.Context, *Empty) (*CategoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategories not implemented")
}
func (UnimplementedBakeryPOSServiceServer) GetCategoryById(context.Context, *GetCategoryByIdRequest) (*CategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryById not implemented")
}
func (UnimplementedBakeryPOSServiceServer) CreateProduct(context.Context, *CreateProductRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedBakeryPOSServiceServer) UpdateProduct(context.Context, *UpdateProductRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedBakeryPOSServiceServer) DeleteProduct(context.Context, *DeleteProductRequest) (*DeleteProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedBakeryPOSServiceServer) GetProduct(context.Context, *ProductRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedBakeryPOSServiceServer) ListProducts(context.Context, *Empty) (*ProductListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProducts not implemented")
}
func (UnimplementedBakeryPOSServiceServer) AdjustStock(context.Context, *ProductRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdjustStock not implemented")
}
func (UnimplementedBakeryPOSServiceServer) ReceiveStock(context.Context, *ProductRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveStock not implemented")
}
func (UnimplementedBakeryPOSServiceServer) StockOpname(context.Context, *Empty) (*ProductListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StockOpname not implemented")
}
func (UnimplementedBakeryPOSServiceServer) CreateSale(context.Context, *SaleRequest) (*SaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSale not implemented")
}
func (UnimplementedBakeryPOSServiceServer) PrintReceipt(context.Context, *SaleRequest) (*SaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrintReceipt not implemented")
}
func (UnimplementedBakeryPOSServiceServer) GetSalesHistory(context.Context, *Empty) (*ListSale, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSalesHistory not implemented")
}
func (UnimplementedBakeryPOSServiceServer) GenerateReport(context.Context, *ReportRequest) (*ReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateReport not implemented")
}
func (UnimplementedBakeryPOSServiceServer) ListUsers(context.Context, *Empty) (*UserList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedBakeryPOSServiceServer) CreateUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedBakeryPOSServiceServer) UpdateUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedBakeryPOSServiceServer) DeleteUser(context.Context, *ProductRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedBakeryPOSServiceServer) mustEmbedUnimplementedBakeryPOSServiceServer() {}
func (UnimplementedBakeryPOSServiceServer) testEmbeddedByValue()                          {}

// UnsafeBakeryPOSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BakeryPOSServiceServer will
// result in compilation errors.
type UnsafeBakeryPOSServiceServer interface {
	mustEmbedUnimplementedBakeryPOSServiceServer()
}

func RegisterBakeryPOSServiceServer(s grpc.ServiceRegistrar, srv BakeryPOSServiceServer) {
	// If the following call pancis, it indicates UnimplementedBakeryPOSServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BakeryPOSService_ServiceDesc, srv)
}

func _BakeryPOSService_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BakeryPOSServiceServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BakeryPOSService_CreateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BakeryPOSServiceServer).CreateCategory(ctx, req.(*CategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BakeryPOSService_ListCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BakeryPOSServiceServer).ListCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BakeryPOSService_ListCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BakeryPOSServiceServer).ListCategories(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BakeryPOSService_GetCategoryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BakeryPOSServiceServer).GetCategoryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BakeryPOSService_GetCategoryById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BakeryPOSServiceServer).GetCategoryById(ctx, req.(*GetCategoryByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BakeryPOSService_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BakeryPOSServiceServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BakeryPOSService_CreateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BakeryPOSServiceServer).CreateProduct(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BakeryPOSService_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BakeryPOSServiceServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BakeryPOSService_UpdateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BakeryPOSServiceServer).UpdateProduct(ctx, req.(*UpdateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BakeryPOSService_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BakeryPOSServiceServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BakeryPOSService_DeleteProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BakeryPOSServiceServer).DeleteProduct(ctx, req.(*DeleteProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BakeryPOSService_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BakeryPOSServiceServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BakeryPOSService_GetProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BakeryPOSServiceServer).GetProduct(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BakeryPOSService_ListProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BakeryPOSServiceServer).ListProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BakeryPOSService_ListProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BakeryPOSServiceServer).ListProducts(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BakeryPOSService_AdjustStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BakeryPOSServiceServer).AdjustStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BakeryPOSService_AdjustStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BakeryPOSServiceServer).AdjustStock(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BakeryPOSService_ReceiveStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BakeryPOSServiceServer).ReceiveStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BakeryPOSService_ReceiveStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BakeryPOSServiceServer).ReceiveStock(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BakeryPOSService_StockOpname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BakeryPOSServiceServer).StockOpname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BakeryPOSService_StockOpname_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BakeryPOSServiceServer).StockOpname(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BakeryPOSService_CreateSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BakeryPOSServiceServer).CreateSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BakeryPOSService_CreateSale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BakeryPOSServiceServer).CreateSale(ctx, req.(*SaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BakeryPOSService_PrintReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BakeryPOSServiceServer).PrintReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BakeryPOSService_PrintReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BakeryPOSServiceServer).PrintReceipt(ctx, req.(*SaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BakeryPOSService_GetSalesHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BakeryPOSServiceServer).GetSalesHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BakeryPOSService_GetSalesHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BakeryPOSServiceServer).GetSalesHistory(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BakeryPOSService_GenerateReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BakeryPOSServiceServer).GenerateReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BakeryPOSService_GenerateReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BakeryPOSServiceServer).GenerateReport(ctx, req.(*ReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BakeryPOSService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BakeryPOSServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BakeryPOSService_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BakeryPOSServiceServer).ListUsers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BakeryPOSService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BakeryPOSServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BakeryPOSService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BakeryPOSServiceServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _BakeryPOSService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BakeryPOSServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BakeryPOSService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BakeryPOSServiceServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _BakeryPOSService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BakeryPOSServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BakeryPOSService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BakeryPOSServiceServer).DeleteUser(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BakeryPOSService_ServiceDesc is the grpc.ServiceDesc for BakeryPOSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BakeryPOSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BakeryPOSService",
	HandlerType: (*BakeryPOSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCategory",
			Handler:    _BakeryPOSService_CreateCategory_Handler,
		},
		{
			MethodName: "ListCategories",
			Handler:    _BakeryPOSService_ListCategories_Handler,
		},
		{
			MethodName: "GetCategoryById",
			Handler:    _BakeryPOSService_GetCategoryById_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _BakeryPOSService_CreateProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _BakeryPOSService_UpdateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _BakeryPOSService_DeleteProduct_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _BakeryPOSService_GetProduct_Handler,
		},
		{
			MethodName: "ListProducts",
			Handler:    _BakeryPOSService_ListProducts_Handler,
		},
		{
			MethodName: "AdjustStock",
			Handler:    _BakeryPOSService_AdjustStock_Handler,
		},
		{
			MethodName: "ReceiveStock",
			Handler:    _BakeryPOSService_ReceiveStock_Handler,
		},
		{
			MethodName: "StockOpname",
			Handler:    _BakeryPOSService_StockOpname_Handler,
		},
		{
			MethodName: "CreateSale",
			Handler:    _BakeryPOSService_CreateSale_Handler,
		},
		{
			MethodName: "PrintReceipt",
			Handler:    _BakeryPOSService_PrintReceipt_Handler,
		},
		{
			MethodName: "GetSalesHistory",
			Handler:    _BakeryPOSService_GetSalesHistory_Handler,
		},
		{
			MethodName: "GenerateReport",
			Handler:    _BakeryPOSService_GenerateReport_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _BakeryPOSService_ListUsers_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _BakeryPOSService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _BakeryPOSService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _BakeryPOSService_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bakery.proto",
}
